package de.alpharogroup.wicket.data.table;import java.text.SimpleDateFormat;import java.util.Date;import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;import org.apache.wicket.markup.html.basic.Label;import org.apache.wicket.markup.repeater.Item;import org.apache.wicket.model.AbstractReadOnlyModel;import org.apache.wicket.model.IModel;import org.apache.wicket.util.lang.Args;/** * The class {@link DateColumn} can format a date. * * @param <T> the generic type from the model object */public class DateColumn<T> extends PropertyColumn<T, Void> {  /** The Constant serialVersionUID. */ private static final long serialVersionUID = 1L;  /** The date format. */ private final String dateFormat; /**  * Instantiates a new {@link DateColumn} object.  *  * @param displayModel the display model  * @param propertyExpression the property expression  * @param dateFormat the date format  */ public DateColumn(final IModel<String> displayModel, final String propertyExpression, final String dateFormat) {  super(displayModel, propertyExpression);  this.dateFormat = Args.notNull(dateFormat, "dateFormat"); } /**  * {@inheritDoc}  */ @Override public void populateItem(Item<ICellPopulator<T>> cellItem, String componentId,   final IModel<T> rowModel) {  cellItem.add(new Label(componentId, new AbstractReadOnlyModel<String>() {   private static final long serialVersionUID = 1L;   /**    * {@inheritDoc}    */   @Override   public String getObject() {    IModel<Object> propertyModel = DateColumn.this.getDataModel(rowModel);    Date value = (Date) propertyModel.getObject();    SimpleDateFormat format = new SimpleDateFormat(dateFormat);    return format.format(value);   }  })); }}
